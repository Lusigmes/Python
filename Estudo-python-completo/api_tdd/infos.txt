pip install poetry

poetry init
<escolher dependencias>
(
python = "^3.12"
fastapi = "^0.111.0"
uvicorn = "^0.30.1"
pydantic = "^2.7.3"
pydantic-settings = "^2.3.2"
motor = "^3.4.0"
pre-commit = "^3.7.1"
pytest = "^8.2.2"
pytest-asyncio = "^0.23.7"
)

poetry install

criar pastas docs/imgs

# Construir configurações

criar pasta base(store, )
    criar __init__.py
    criar main.py -> PREENCHER

    criar pasta core
        criar __init__.py
        criar config.py -> PREENCHER

criar .env -> preencher com string de conexão do mongo

criar docker-compose.yml -> preencher com as configurações
    nano docker-compose.yml -> setar configuraç~oes

criar Makefile com :
    run:
	@uvicorn store.main:app --reload
docker-compose up -d -> iniciar docker // docker-compose down-> fechar docker
executar no terminal make run

adicionar em Makefile:
    precommit-install:
	    @poetry run pre-commit install
executar no terminal make pre-commit install
executar pre-commit apenas uma vez

criar pasta tests na raiz
    criar pasta schemas na pasta tests
        criar arquivo test_product.py para testar o schema do produto
            preencher as funções de teste de acordo com o comportamento esperado

adicionar em Makefile:
    test:
	    @poetry run pytest
executar no terminal make test


criar pasta schemas na pasta store
    criar arquivo base.py e criar um schema base para os produtos(BaseSchemaMixin)

    criar arquivo product.py e preencher com os atributos do produto
    importar e herdar o schema base de BaseSchemaMixin

na pasta tests/schemas em test_product.py importar construtor do produto em product.py e realizar os testes criados em test_products.py
executar no terminal make test

criar aquivo factories.py ma pasta tests
    criar funções para retornar objetos
    mockados para realizar testes

criar arquivo conftest.py na pasta tests
    criar metodo event_loop para teste assincrono(?) no banco

criar pasta db na pasta store
    criar arquivo mongo.py e criar um cliente mongo utilizando lib motor

dentro de tests/conftest.py chamar ocliente mongo criado em mongo.py
e deve criar metodos para tratar o cliente mongo

criar pasta usecases dentro da pasta tests
    criar arquivo test_product.py em usecases
        criar metodos de casos de uso requeridos para os testes

criar pasta usecases dentro da pasta store
    criar arquivo product.py em usecases
        criar metodo ProductUseCase para obter dados de caso de uso
        em tests/usecases/test_products deve chamar o product_usecase

        criar atributo database herdando de AsyncIOMotorDatabase para criar o banco

        criar atributo collection interagindo com database para criar collections no mongo

(Pdb) self.client
AsyncIOMotorClient(MongoClient(host=['localhost:27017'], document_class=dict, tz_aware=False, connect=False, driver=DriverInfo(name='Motor', version='3.4.0', platform='asyncio')))

(Pdb) self.client.get_database()
AsyncIOMotorDatabase(Database(MongoClient(host=['localhost:27017'], document_class=dict, tz_aware=False, connect=False, driver=DriverInfo(name='Motor', version='3.4.0', platform='asyncio')), 'api_tdd'))

(Pdb) self.database.get_collection("products")
AsyncIOMotorCollection(Collection(Database(MongoClient(host=['localhost:27017'], document_class=dict, tz_aware=False, connect=False, driver=DriverInfo(name='Motor', version='3.4.0', platform='asyncio')), 'api_tdd'), 'products'))


em store/usecases/product.py criar metodo create dentror de ProductUseCase

em tests/conftest.py criar metodos fixture para product_in e product_id
e chamar em tests/usecases/test_products

erro no teste =  async def test_usecases_should_return_sucess():
